{"version":3,"file":"static/js/720.822976af.chunk.js","mappings":"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","sources":["Components/Authentication/Auth.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { BiLogIn, BiHomeAlt } from \"react-icons/bi\";\r\nimport AuthAnimation from \"../../assets/animations/Authentication.json\";\r\nimport Lottie from \"lottie-react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useFetch from \"../../Hooks/useFetch\";\r\nimport TransitionAlerts from \"../Alerts/TransitionAlerts\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setToken, setUser } from \"../../Slices/authSlice\";\r\n\r\nconst Auth = () => {\r\n  const [formData, setFormData] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n    phoneNumber: \"\",\r\n    address: \"\",\r\n    selectedLogin: \"patient\",\r\n  });\r\n\r\n  const loginas = [\r\n    \"employee\",\r\n    \"patient\",\r\n    \"doctor\",\r\n    // Add more services as needed\r\n  ];\r\n  const loginRoute = {\r\n    employee: \"/api/user/login\",\r\n    patient: `/api/patient/login`,\r\n    doctor: `/api/doctor/login`,\r\n    // Add more services and durations as needed\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const {\r\n    isLoading,\r\n    setIsLoading,\r\n    sendRequest,\r\n    open,\r\n    setOpen,\r\n    message,\r\n    setMessage,\r\n  } = useFetch();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    const val = type === \"checkbox\" ? checked : value;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: val,\r\n    }));\r\n  };\r\n\r\n\r\n  const [loginState, setLoginState] = useState(true);\r\n  /* Manangle loginstate/register */\r\n  const handleLoginState = () => {\r\n    setLoginState(!loginState);\r\n  };\r\n  /* Login */\r\n  const handleLogin = async () => {\r\n    console.log(\"Login Form Data:\", formData);\r\n    try {\r\n      const { email, password, selectedLogin } = formData;\r\n      if (!email || !password || !selectedLogin)\r\n        throw new Error(\"All fields Required\");\r\n      setIsLoading(true);\r\n      const data = await sendRequest(\r\n        loginRoute[selectedLogin],\r\n        \"POST\",\r\n        JSON.stringify({ email: email, password: password }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      );\r\n      console.log(data);\r\n      if (data.status === false) throw new Error(data.message);\r\n      setTimeout(() => {\r\n        setIsLoading(false);\r\n        setOpen(true);\r\n        setMessage(\"Login Succeeded\");\r\n        dispatch(setUser(data.message.user));\r\n        dispatch(setToken(data.message.token));\r\n        navigate(\"/dashboard\");\r\n      }, 2000);\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      setOpen(true);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSignUp = async () => {\r\n    console.log(\"Sign Up Form Data:\", formData);\r\n    try {\r\n      const {\r\n        email,\r\n        password,\r\n        phoneNumber,\r\n        address,\r\n        firstName,\r\n        lastName,\r\n        selectedLogin,\r\n      } = formData;\r\n      if (\r\n        !email ||\r\n        !password ||\r\n        !phoneNumber ||\r\n        !address ||\r\n        !firstName ||\r\n        !lastName\r\n      )\r\n        throw new Error(\"Please Fill All fields Required \");\r\n      setIsLoading(true);\r\n      const data = await sendRequest(\r\n        \"/api/patient/signup\",\r\n        \"POST\",\r\n        JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n          phonenumber: phoneNumber,\r\n          address: address,\r\n          firstname: firstName,\r\n          lastname: lastName,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      );\r\n      console.log(data);\r\n      if (data.status === false) throw new Error(data.message);\r\n      setTimeout(() => {\r\n        setIsLoading(false);\r\n        setOpen(true);\r\n        setMessage(\"Login Succeeded\");\r\n        dispatch(setUser(data.message.user));\r\n        dispatch(setToken(data.message.token));\r\n        navigate(\"/login\");\r\n      }, 2000);\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      setOpen(true);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAuth = async () => {};\r\n\r\n  return (\r\n    <section className=\"h-screen flex flex-col md:flex-row justify-center space-y-10 md:space-y-0 md:space-x-16 items-center my-2 mx-5 md:mx-0 md:my-0\">\r\n      <div className=\"md:w-1/3 max-w-sm\">\r\n        <Lottie animationData={AuthAnimation} />\r\n      </div>\r\n      <div className=\"md:w-1/3 max-w-sm\">\r\n        <div className=\"mb-2 flex items-center\">\r\n          <span className=\"px-2 mb-2 text-2xl bg-[#70d8bd] rounded-lg\">\r\n            {loginState ? \"Welcome Back\" : \"New User ?\"}\r\n          </span>\r\n          <BiHomeAlt\r\n            className=\"ml-2 mb-2 cursor-pointer bg-[#70d8bd] rounded-lg hover:text-[#ade9dc] transition duration-300 ease-in-out hover:p-1 transition duration-500 ease-in-out\"\r\n            size={30}\r\n            onClick={(e) => navigate(\"/\")}\r\n          />\r\n          <BiLogIn className=\"ml-2 mb-2 cursor-pointer \" size={30} />\r\n        </div>\r\n        <input\r\n          className=\"text-sm w-full px-4 py-2 border border-solid border-gray-300 rounded\"\r\n          type=\"text\"\r\n          placeholder=\"Email Address\"\r\n          name=\"email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          className=\"text-sm w-full px-4 py-2 border border-solid border-gray-300 rounded mt-4\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          name=\"password\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n        />\r\n        {!loginState && (\r\n          <>\r\n            <input\r\n              className=\"text-sm w-full px-4 py-2 border border-solid border-gray-300 rounded mt-4\"\r\n              type=\"text\"\r\n              placeholder=\"First Name\"\r\n              name=\"firstName\"\r\n              value={formData.firstName}\r\n              onChange={handleChange}\r\n            />\r\n            <input\r\n              className=\"text-sm w-full px-4 py-2 border border-solid border-gray-300 rounded mt-4\"\r\n              type=\"text\"\r\n              placeholder=\"Last Name\"\r\n              name=\"lastName\"\r\n              value={formData.lastName}\r\n              onChange={handleChange}\r\n            />\r\n            <input\r\n              className=\"text-sm w-full px-4 py-2 border border-solid border-gray-300 rounded mt-4\"\r\n              type=\"text\"\r\n              placeholder=\"Phone Number\"\r\n              name=\"phoneNumber\"\r\n              value={formData.phoneNumber}\r\n              onChange={handleChange}\r\n            />\r\n            <input\r\n              className=\"text-sm w-full px-4 py-2 border border-solid border-gray-300 rounded mt-4\"\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              name=\"address\"\r\n              value={formData.address}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        )}\r\n        {loginState && (\r\n          <div className=\"flex mt-3 justify-between font-semibold text-sm\">\r\n            <label className=\"flex text-slate-500 hover:text-slate-600 cursor-pointer\">\r\n              <input\r\n                className=\"mr-1\"\r\n                type=\"checkbox\"\r\n                name=\"rememberMe\"\r\n                checked={formData.rememberMe}\r\n                onChange={handleChange}\r\n              />\r\n              <span>Remember Me</span>\r\n            </label>\r\n            <h3 className=\"text-[#70d8bd] hover:underline hover:underline-offset-4 cursor-pointer hover:text-[#ade9dc] transition duration-300 ease-in-out\">\r\n              Forgot Password?\r\n            </h3>\r\n          </div>\r\n        )}\r\n        <div className=\"mt-4 flex items-center text-center md:text-left\">\r\n          {!isLoading && (\r\n            <button\r\n              className=\"bg-[#70d8bd] hover:bg-[#ade9dc] px-4 py-2 text-black uppercase rounded text-xs tracking-wider\"\r\n              type=\"button\"\r\n              onClick={loginState ? handleLogin : handleSignUp}\r\n              disabled={isLoading}\r\n            >\r\n              {loginState ? \"Login\" : \"Sign up\"}\r\n            </button>\r\n          )}\r\n          {loginState && (\r\n            <div>\r\n              <select\r\n                value={formData.selectedLogin}\r\n                onChange={handleChange}\r\n                name=\"selectedLogin\"\r\n                className=\"ml-1 select-field border-solid border-2 border-black rounded-lg px-4  py-0.5\"\r\n              >\r\n                {/* <option value=\"\">Login Method</option> */}\r\n                {loginas.map((service, index) => (\r\n                  <option key={index} value={service}>\r\n                    {service}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {isLoading && (\r\n          <div className=\" mt-2 px-3 py-1 text-xs font-medium leading-none text-center text-blue-800 bg-blue-200 rounded-full animate-pulse dark:bg-blue-900 dark:text-blue-200\">\r\n            loading...\r\n          </div>\r\n        )}\r\n        {open && (\r\n          <TransitionAlerts open={open} setOpen={setOpen} msg={message} />\r\n        )}\r\n        <div className=\"flex items-center mt-4 font-semibold text-sm text-slate-500 text-center md:text-left\">\r\n          {loginState ? \"Don't have an account ?\" : \"Already a member ?\"}\r\n          <h3\r\n            className=\"ml-1 text-[#70d8bd] hover:underline hover:underline-offset-4 cursor-pointer hover:text-[#ade9dc] transition duration-300 ease-in-out\"\r\n            onClick={(e) => handleLoginState()}\r\n          >\r\n            {loginState ? \"Register\" : \"Sign in\"}\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["Auth","formData","setFormData","useState","firstName","lastName","email","password","rememberMe","phoneNumber","address","selectedLogin","loginRoute","employee","patient","doctor","dispatch","useDispatch","navigate","useNavigate","isLoading","setIsLoading","sendRequest","open","setOpen","message","setMessage","useFetch","handleChange","e","name","value","type","checked","target","val","prevData","loginState","setLoginState","_jsxs","className","children","_jsx","Lottie","animationData","AuthAnimation","BiHomeAlt","size","onClick","BiLogIn","placeholder","onChange","_Fragment","async","console","log","Error","data","JSON","stringify","status","setTimeout","setUser","user","setToken","token","error","phonenumber","firstname","lastname","disabled","map","service","index","TransitionAlerts","msg"],"sourceRoot":""}