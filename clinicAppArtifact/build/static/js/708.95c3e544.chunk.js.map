{"version":3,"file":"static/js/708.95c3e544.chunk.js","mappings":"uIAEA,MA6BA,EA7BuBA,IAKhB,IAJLC,MAAOC,EAAS,SAChBC,EAAQ,SACRC,EAAW,OACRC,GACJL,EACC,MAAOC,EAAOK,IAAYC,EAAAA,EAAAA,UAASL,GAcnC,OAZAM,EAAAA,EAAAA,YAAU,KACRF,EAASJ,EAAU,GAClB,CAACA,KAGJM,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAUC,YAAW,KACzBP,EAASF,EAAM,GACdG,GACH,MAAO,IAAMO,aAAaF,EAAQ,GACjC,CAACR,KAGFW,EAAAA,EAAAA,KAAA,YACMP,EACJJ,MAAOA,EACPE,SAAWU,GAAMP,EAASO,EAAEC,OAAOb,QACnC,C,iGCdN,MAmJA,EAnJgBD,IAOT,IAPU,QACfe,EAAO,KACPC,EAAI,eACJC,EAAc,IACdC,GAAM,EAAI,QACVC,GAAU,EAAI,WACdC,GAAW,GACZpB,EACC,MAAOqB,EAAcC,IAAmBf,EAAAA,EAAAA,UAAS,IAE3CgB,GAAQC,EAAAA,EAAAA,IAAc,CAC1BR,OACAD,UACAU,MAAO,CACLJ,gBAEFK,qBAAqBA,EAAAA,EAAAA,MACrBC,iBAAiBA,EAAAA,EAAAA,MACjBC,uBAAuBA,EAAAA,EAAAA,QAGzB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yCAAwCC,SAAA,CACpDZ,IACCP,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,qCAAoCC,UACjDnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAc,CACb/B,MAAmB,OAAZoB,QAAY,IAAZA,EAAAA,EAAgB,GACvBlB,SAAWF,GAAUqB,EAAgBW,OAAOhC,IAC5C6B,UAAU,qEACVI,YAAY,4BAIjBhB,IACCW,EAAAA,EAAAA,MAAA,UACEM,QAAUtB,MACViB,UAAU,iEAAgEC,SAAA,EAE1EnB,EAAAA,EAAAA,KAACwB,EAAAA,IAAU,CAACN,UAAU,YAAY,kBAKxClB,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,qIAAoIC,UACjJF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,uEAAsEC,SAAA,EACrFnB,EAAAA,EAAAA,KAAA,SAAOkB,UAAU,iBAAgBC,SAC9BR,EAAMc,kBAAkBC,KAAKC,IAC5B3B,EAAAA,EAAAA,KAAA,MAAAmB,SACGQ,EAAYC,QAAQF,KAAKG,IACxB7B,EAAAA,EAAAA,KAAA,MAAoBkB,UAAU,yBAAwBC,UACnDW,EAAAA,EAAAA,IACCD,EAAOE,OAAOC,UAAUH,OACxBA,EAAOI,eAHFJ,EAAOK,OAFXP,EAAYO,SAYzBlC,EAAAA,EAAAA,KAAA,SAAAmB,SACGR,EAAMwB,cAAcC,KAAKC,OACxB1B,EAAMwB,cAAcC,KAAKV,KAAI,CAACY,EAAKC,KACjCvC,EAAAA,EAAAA,KAAA,MAEEkB,UAAS,uBAAAsB,OACPD,EAAI,IAAM,EAAI,cAAgB,cAAa,wBAC3CpB,SAEDmB,EAAIG,kBAAkBf,KAAKgB,IAC1B1C,EAAAA,EAAAA,KAAA,MAAkBkB,UAAU,cAAaC,UACtCW,EAAAA,EAAAA,IACCY,EAAKX,OAAOC,UAAUU,KACtBA,EAAKT,eAHAS,EAAKR,OANXI,EAAIJ,OAgBblC,EAAAA,EAAAA,KAAA,MAAIkB,UAAU,mBAAkBC,UAC9BnB,EAAAA,EAAAA,KAAA,MAAI2C,QAAS,GAAGxB,SAAC,gCAO3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wGAAuGC,SAAA,EACpHnB,EAAAA,EAAAA,KAAA,UACEuB,QAASA,KACPZ,EAAMiC,cAAc,EAEtBC,UAAWlC,EAAMmC,qBACjB5B,UAAU,8DAA6DC,SAEtE,OAEHnB,EAAAA,EAAAA,KAAA,UACEuB,QAASA,KACPZ,EAAMoC,UAAU,EAElBF,UAAWlC,EAAMqC,iBACjB9B,UAAU,sDAAqDC,SAE9D,OAGHF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4DAA2DC,SAAA,EACxEF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,0BAAyBC,SAAA,EACvCnB,EAAAA,EAAAA,KAAA,OAAAmB,SAAK,UACLF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CACGR,EAAMsC,WAAWC,WAAWC,UAAY,EAAE,MAAI,IAC9CxC,EAAMyC,sBAGXnC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,0BAAyBC,SAAA,CAAC,iBAExCnB,EAAAA,EAAAA,KAAA,SACEqD,KAAK,SACLC,aAAc3C,EAAMsC,WAAWC,WAAWC,UAAY,EACtD5D,SAAWU,IACT,MAAMsD,EAAOtD,EAAEC,OAAOb,MAAQmE,OAAOvD,EAAEC,OAAOb,OAAS,EAAI,EAC3DsB,EAAM8C,aAAaF,EAAK,EAE1BrC,UAAU,+CAGdlB,EAAAA,EAAAA,KAAA,UACEX,MAAOsB,EAAMsC,WAAWC,WAAWQ,SACnCnE,SAAWU,IACTU,EAAMgD,YAAYH,OAAOvD,EAAEC,OAAOb,OAAO,EAE3C6B,UAAU,oCAAmCC,SAE5C,CAAC,GAAI,GAAI,GAAI,IAAIO,KAAKgC,IACrBzC,EAAAA,EAAAA,MAAA,UAAuB5B,MAAOqE,EAASvC,SAAA,CAAC,QAChCuC,IADKA,eAOjB,C,gwDChJV,MAqFA,EArFiBE,KACf,MAAOxD,EAAMyD,IAAWlE,EAAAA,EAAAA,UAAS,IAC3BmE,GAAYC,EAAAA,EAAAA,UAAQ,IAAMC,GAAO,IAEjCC,GAAeC,EAAAA,EAAAA,MAEfC,GAAQC,EAAAA,EAAAA,KAAavD,GAAUA,EAAMwD,UAAUF,SAE/C,UACJG,EAAS,aACTC,EAAY,QACZC,EAAO,KACPC,EAAI,YACJC,EAAW,WACXC,EAAU,QACVC,IACEC,EAAAA,EAAAA,KAwBE1E,EAAU,CACd8D,EAAaa,SAAS,KAAM,CAAEjD,OAAQ,OACtCoC,EAAaa,SAAS,eAAgB,CAAEjD,OAAQ,iBAChDoC,EAAaa,SAAS,QAAS,CAC7BjD,OAAQ,OACRa,KAAOqC,IAEH9D,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACG4D,EAAKzC,IAAI0C,SAASC,MAClB,UAWX,OAJArF,EAAAA,EAAAA,YAAU,KAtCYsF,WACpB,IACEX,GAAa,GACb,MAAMY,QAAiBT,EACrB,8BACA,MACA,KACA,CACEU,cAAejB,IAInB,GADAkB,QAAQC,IAAIH,IACY,IAApBA,EAASI,OAAkB,MAAM,IAAIC,MAAML,EAASX,SACxDX,EAAQsB,EAASX,SACjBD,GAAa,EACf,CAAE,MAAOkB,GACPlB,GAAa,GACbK,GAAQ,GACRD,EAAWc,EAAMjB,QACnB,GAoBAkB,EAAe,GACd,KAGD1F,EAAAA,EAAAA,KAAC2F,EAAAA,EAAgB,CAAAxE,UACfF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2FAA0FC,SAAA,EACvGnB,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CAACC,MAAO,iBACf7F,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,YAAWC,SACvBmD,GACCtE,EAAAA,EAAAA,KAAC8F,EAAAA,EAAO,KAER9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CACN5F,QAASA,EACTC,KAAM0D,OAKZ9D,EAAAA,EAAAA,KAAA,OAAAmB,SACGsD,IACCzE,EAAAA,EAAAA,KAACgG,EAAAA,EAAgB,CAACvB,KAAMA,EAAMG,QAASA,EAASqB,IAAKzB,UAI1C,C","sources":["Components/MyTable/DebouncedInput.js","Components/MyTable/MyTable.js","Components/Services/Services.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst DebouncedInput = ({\r\n  value: initValue,\r\n  onChange,\r\n  debounce = 700,\r\n  ...props\r\n}) => {\r\n  const [value, setValue] = useState(initValue);\r\n\r\n  useEffect(() => {\r\n    setValue(initValue);\r\n  }, [initValue]);\r\n\r\n  // *  0.5s after set value in state\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      onChange(value);\r\n    }, debounce);\r\n    return () => clearTimeout(timeout);\r\n  }, [value]);\r\n\r\n  return (\r\n    <input\r\n      {...props}\r\n      value={value}\r\n      onChange={(e) => setValue(e.target.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DebouncedInput;\r\n","import React, { useState } from \"react\";\r\nimport { BsDownload } from \"react-icons/bs\";\r\n\r\nimport {\r\n  createColumnHelper,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\nimport DebouncedInput from \"./DebouncedInput\";\r\n\r\nconst MyTable = ({\r\n  columns,\r\n  data,\r\n  handleDownload,\r\n  flg = true,\r\n  inpflag = true,\r\n  heightFlag=false\r\n}) => {\r\n  const [globalFilter, setGlobalFilter] = useState(\"\");\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: {\r\n      globalFilter,\r\n    },\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n  });\r\n\r\n  return (\r\n    <div className=\"p-2 text-white \">\r\n      <div className=\"flex justify-between items-center mb-2\">\r\n        {inpflag && (\r\n          <div className=\"flex items-center gap-2 text-black\">\r\n            <DebouncedInput\r\n              value={globalFilter ?? \"\"}\r\n              onChange={(value) => setGlobalFilter(String(value))}\r\n              className=\"p-2 bg-transparent outline-none border-b-2 focus:border-indigo-500\"\r\n              placeholder=\"Search all columns...\"\r\n            />\r\n          </div>\r\n        )}\r\n        {flg && (\r\n          <button\r\n            onClick={(e) => {}}\r\n            className=\"p-2 bg-green-500 rounded-md text-white flex items-center gap-1\"\r\n          >\r\n            <BsDownload className=\"w-6 h-6\" />\r\n            Download\r\n          </button>\r\n        )}\r\n      </div>\r\n      <div className=\"w-[350px] h-[400px] text-sm sm:text-sm md:text-sm lg:text-sm overflow-auto sm:w-full md:w-full md:h-[484px] lg:w-full lg:h-[484px]\">\r\n        <table className=\"border-collapse text-left border border-gray-700 md:w-full lg:w-full\">\r\n          <thead className=\"bg-indigo-600 \">\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <tr key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <th key={header.id} className=\"capitalize px-3.5 py-2\">\r\n                    {flexRender(\r\n                      header.column.columnDef.header,\r\n                      header.getContext()\r\n                    )}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody>\r\n            {table.getRowModel().rows.length ? (\r\n              table.getRowModel().rows.map((row, i) => (\r\n                <tr\r\n                  key={row.id}\r\n                  className={`\r\n                  ${i % 2 === 0 ? \"bg-gray-900\" : \"bg-gray-800\"}\r\n                  `}\r\n                >\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <td key={cell.id} className=\"px-3.5 py-2\">\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr className=\"text-center h-32\">\r\n                <td colSpan={12}>No Recoard Found!</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* Pagination */}\r\n      <div className=\"flex flex-col lg:flex-row items-center justify-center lg:justify-end mt-2 lg:mt-0 lg:gap-2 text-black\">\r\n        <button\r\n          onClick={() => {\r\n            table.previousPage();\r\n          }}\r\n          disabled={!table.getCanPreviousPage()}\r\n          className=\"p-1 border border-gray-300 px-2 lg:px-2 disabled:opacity-30\"\r\n        >\r\n          {\"<\"}\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            table.nextPage();\r\n          }}\r\n          disabled={!table.getCanNextPage()}\r\n          className=\"p-1 border border-gray-300 px-2 disabled:opacity-30\"\r\n        >\r\n          {\">\"}\r\n        </button>\r\n\r\n        <div className=\"mt-2 lg:mt-0 flex flex-col lg:flex-row items-center gap-2\">\r\n          <span className=\"flex items-center gap-1\">\r\n            <div>Page</div>\r\n            <strong>\r\n              {table.getState().pagination.pageIndex + 1} of{\" \"}\r\n              {table.getPageCount()}\r\n            </strong>\r\n          </span>\r\n          <span className=\"flex items-center gap-1\">\r\n            | Go to page:\r\n            <input\r\n              type=\"number\"\r\n              defaultValue={table.getState().pagination.pageIndex + 1}\r\n              onChange={(e) => {\r\n                const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                table.setPageIndex(page);\r\n              }}\r\n              className=\"border p-1 rounded w-16 bg-transparent\"\r\n            />\r\n          </span>\r\n          <select\r\n            value={table.getState().pagination.pageSize}\r\n            onChange={(e) => {\r\n              table.setPageSize(Number(e.target.value));\r\n            }}\r\n            className=\"p-1 md:p-2 lg:p-2  bg-transparent\"\r\n          >\r\n            {[10, 20, 30, 50].map((pageSize) => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyTable;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport DashboardWrapper from \"../Shared/DashboardWrapper\";\r\nimport Header from \"../Shared/Header\";\r\nimport { createColumnHelper } from \"@tanstack/react-table\";\r\nimport MyTable from \"../MyTable/MyTable\";\r\nimport useFetch from \"../../Hooks/useFetch\";\r\nimport { useSelector } from \"react-redux\";\r\nimport TransitionAlerts from \"../Alerts/TransitionAlerts\";\r\nimport Loading from \"../Loading/Loading\";\r\nimport mdata from \"./MOCK_DATA.json\";\r\n\r\n\r\nconst Services = () => {\r\n  const [data, setData] = useState([]);\r\n  const dummydata = useMemo(() => mdata, []);\r\n\r\n  const columnHelper = createColumnHelper();\r\n\r\n  const token = useSelector((state) => state.authState.token);\r\n\r\n  const {\r\n    isLoading,\r\n    setIsLoading,\r\n    message,\r\n    open,\r\n    sendRequest,\r\n    setMessage,\r\n    setOpen,\r\n  } = useFetch();\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await sendRequest(\r\n        \"/api/patient/getallpatients\",\r\n        \"GET\",\r\n        null,\r\n        {\r\n          Authorization: token,\r\n        }\r\n      );\r\n      console.log(response);\r\n      if (response.status === false) throw new Error(response.message);\r\n      setData(response.message);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      setOpen(true);\r\n      setMessage(error.message);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    columnHelper.accessor(\"id\", { header: \"ID\" }),\r\n    columnHelper.accessor(\"service_name\", { header: \"Service Name\" }),\r\n    columnHelper.accessor(\"price\", {\r\n      header: \"Cost\",\r\n      cell: (info) => {\r\n        return (\r\n          <span>\r\n            {info.row.original.price}\r\n            {\"$\"}\r\n          </span>\r\n        );\r\n      },\r\n    }),\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchPatients();\r\n  }, []);\r\n\r\n  return (\r\n    <DashboardWrapper>\r\n      <div className=\"min-h-screen flex text-sm md:text-[20px] lg:text-lg  flex-col lg:px-32 px-5 pt-0 lg:pt-0\">\r\n        <Header title={\"Our Doctors\"} />\r\n        <div className=\"bg-[#fff]\">\r\n          {isLoading ? (\r\n            <Loading />\r\n          ) : (\r\n            <MyTable\r\n              columns={columns}\r\n              data={dummydata}\r\n              // handleDownload={downloader.download}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          {open && (\r\n            <TransitionAlerts open={open} setOpen={setOpen} msg={message} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </DashboardWrapper>\r\n  );\r\n};\r\n\r\nexport default Services;\r\n"],"names":["_ref","value","initValue","onChange","debounce","props","setValue","useState","useEffect","timeout","setTimeout","clearTimeout","_jsx","e","target","columns","data","handleDownload","flg","inpflag","heightFlag","globalFilter","setGlobalFilter","table","useReactTable","state","getFilteredRowModel","getCoreRowModel","getPaginationRowModel","_jsxs","className","children","DebouncedInput","String","placeholder","onClick","BsDownload","getHeaderGroups","map","headerGroup","headers","header","flexRender","column","columnDef","getContext","id","getRowModel","rows","length","row","i","concat","getVisibleCells","cell","colSpan","previousPage","disabled","getCanPreviousPage","nextPage","getCanNextPage","getState","pagination","pageIndex","getPageCount","type","defaultValue","page","Number","setPageIndex","pageSize","setPageSize","Services","setData","dummydata","useMemo","mdata","columnHelper","createColumnHelper","token","useSelector","authState","isLoading","setIsLoading","message","open","sendRequest","setMessage","setOpen","useFetch","accessor","info","original","price","async","response","Authorization","console","log","status","Error","error","fetchPatients","DashboardWrapper","Header","title","Loading","MyTable","TransitionAlerts","msg"],"sourceRoot":""}